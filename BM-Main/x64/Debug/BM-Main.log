  avr-g++ -MM -MG -DF_CPU=16000000 -I./include -mmcu=atmega328p -Wall -Wextra -Wconversion -std=c++17 -Os -fconcepts  -fno-exceptions -fno-unwind-tables -fno-rtti -fno-threadsafe-statics  -funsigned-char -funsigned-bitfields -fshort-enums  main.cc | sed "s/main\.o/& main.d/g" > main.d
  avr-g++ -mmcu=atmega328p -Wall -Wextra -Wconversion -std=c++17 -Os -fconcepts  -fno-exceptions -fno-unwind-tables -fno-rtti -fno-threadsafe-statics  -funsigned-char -funsigned-bitfields -fshort-enums  -DF_CPU=16000000 -I./include  -c -o main.o main.cc
  In file included from main.cc:13:0:
  SPI.h: In function 'void spi::spi0_init()':
SPI.h(73,11): warning G63087B26: conversion to 'uint8_t {aka unsigned char}' from 'int' may alter its value [-Wconversion]
     DDR_SPI &= ~((1 << DD_MOSI) | (1 << DD_MISO) | (1 << DD_SS) | (1 << DD_SCK));
             ^
  In file included from main.cc:15:0:
  uart.c: In function 'void __vector_19()':
uart.c(422,23): warning G63087B26: conversion to 'uint8_t {aka unsigned char}' from 'int' may alter its value [-Wconversion]
           UART0_CONTROL &= ~_BV(UART0_UDRIE);
                         ^
  main.cc: In function 'int main()':
main.cc(45,10): warning G7C671A4C: unused variable 'tesst' [-Wunused-variable]
    uint8_t tesst = 'a';
            ^~~~~
  In file included from main.cc:13:0:
  SPI.h: In instantiation of 'static void spi::SPI<mode, clockRate, Master, lsbfirst, doubleSpeed, MicroController>::init() [with Port = BMCPP::Hal::Port<BMCPP::AVR::B>; unsigned char spiNumber = 0; spi::Mode mode = (spi::Mode)3; spi::ClkRate clockRate = (spi::ClkRate)0; bool Master = true; bool lsbfirst = true; bool doubleSpeed = true; MicroController = BMCPP::AVR::ATMega328]':
  main.cc:46:19:   required from here
SPI.h(153,5): warning GEDD9F3F9: cast to pointer from integer of different size [-Wint-to-pointer-cast]
       (typename UC::mem_width*)BMCPP::Hal::SPI<0>::spcr();
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SPI.h(155,48): warning GEDD9F3F9: cast to pointer from integer of different size [-Wint-to-pointer-cast]
      volatile typename UC::mem_width* spsr_adr = (typename UC::mem_width*)BMCPP::Hal::SPI<0>::spsr();
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SPI.h(152,37): warning G7C671A4C: unused variable 'spcr_adr' [-Wunused-variable]
      volatile typename UC::mem_width* spcr_adr =
                                       ^~~~~~~~
SPI.h(155,37): warning G7C671A4C: unused variable 'spsr_adr' [-Wunused-variable]
      volatile typename UC::mem_width* spsr_adr = (typename UC::mem_width*)BMCPP::Hal::SPI<0>::spsr();
                                       ^~~~~~~~
  In file included from main.cc:14:0:
  Mfrc522.h: In instantiation of 'static HardwareAddresses::ErrorType MFRC522<MicroController>::mfrc522_to_card(HardwareAddresses::Commands, uint8_t*, uint8_t, uint8_t*, uint32_t*) [with MicroController = BMCPP::AVR::ATMega328; uint8_t = unsigned char; uint32_t = long unsigned int]':
  Mfrc522.h:258:27:   required from 'static HardwareAddresses::ErrorType MFRC522<MicroController>::mfrc522_get_card_serial(uint8_t*) [with CardType = RFID::MifareOne; MicroController = BMCPP::AVR::ATMega328; uint8_t = unsigned char]'
  main.cc:55:68:   required from here
Mfrc522.h(169,46): warning G63087B26: conversion to 'uint8_t {aka unsigned char}' from 'int' may alter its value [-Wconversion]
     mfrc522_write(CommandRegister::ComIrqReg, n&(~0x80));//clear all interrupt bits
                                               ~^~~~~~~~
Mfrc522.h(195,52): warning G63087B26: conversion to 'uint8_t {aka unsigned char}' from 'int' may alter its value [-Wconversion]
     mfrc522_write(CommandRegister::BitFramingReg, tmp&(~0x80));
                                                   ~~~^~~~~~~~
  avr-gcc -mmcu=atmega328p -Wall -Wextra -Wconversion -std=c11 -Os   -DF_CPU=16000000 -I./include  -Wl,-Map=main.map,--cref  "-Wl,--section-start=.mmcu=0x910000"  -o main.elf main.o
  ECHO ist ausgeschaltet (OFF).
  Creating load file for Flash: main.hex
  avr-objcopy -O ihex -R .flash main.elf main.hex
